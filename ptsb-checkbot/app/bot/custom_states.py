# устанавливаемые классы
from aiogram.fsm.state import State, StatesGroup            # для механизма состояний логин -> меню -> проверка -> etc


# возможные состояния Админа (только для админа)
class AdminStates(StatesGroup):
    """
    Класс базовых административных состояний
    """
    root_admin_menu = State()           # ADMIN состояние, когда админ находится в root меню всего приложения
    manage_users_menu = State()         # ADMIN состояние, когда админ находится в мейн меню управления пользователями
    input_user_id = State()             # ADMIN состояние, когда админ вводит tg id юзера и для него что-то делается (info, ban, unban, del)
    create_user = State()               # ADMIN состояние, когда админ нажимает "создать юзера"
    list_app_users = State()            # ADMIN состояние, когда админ нажимает "отобразить пользователей бота"
    manage_app_menu = State()           # ADMIN состояние, когда админ переходит в меню управления приложением

# возможные состояния при создании основного профиля пользователя
class AppUserCreation(StatesGroup):
    """
    Класс административных состояний при создании основого профиля пользователя
    """
    CREATE_user_id = State()            # Состояние при создании пользователя, ввод tg_id
    CREATE_user_role = State()          # Состояние при создании пользователя, ввод роли пользователя 
    CREATE_comment = State()            # Состояние при создании пользователя, ввод комментария по пользователю

# возможные состояния при создании профиля sandbox взаимодействия
class SandboxProfileCreation(StatesGroup):
    """
    Класс административных состояний при создании профиля взаимодействия с песочницей
    """
    CREATE_max_checks = State()         # Состояние при создании пользователя, ввод максимально доступного кол-ва проверок в день
    CREATE_check_priority = State()     # Состояние при создании пользователя, ввод приоритета проверки заданий от пользователя
    CREATE_can_get_links = State()      # Состояние при создании пользователя, ввод возможности получать ссылки пользователем на проверку

# возможные состояния всех пользователей (доступны и админу и пользователю)
class UserStates(StatesGroup):
    """
    Класс базовых пользовательских состояний
    """
    check_user_status = State()         # USER состояние, когда пользователь должен проверить свой статус

# возможные состояния взаимодействия с функционалом пеосчницы
class SandboxInteractionStates(UserStates):
    """
    Класс действий взаимодействия с профилем песочницы
    """
    check_api_health = State()              # ADMIN состояние, когда админ нажимает "проверить API"
    sandbox_admin_menu = State()            # ADMIN состояние, когда админ находится в мейн меню sandbox взаимодействия
    sandbox_user_menu = State()             # USER состояние, когда юзер находится в мейн меню sandbox взаимодействия
    input_url_to_scan = State()             # USER состояние, ввод ссылки на проверку
    upload_file_to_scan = State()           # USER состояние, загрузка файла на проверку
    send_req_for_scan = State()             # USER состояние, отправика задания на проверку со всеми данными
    get_scan_results = State()              # USER состояние, попытка узнать результаты проверки
    