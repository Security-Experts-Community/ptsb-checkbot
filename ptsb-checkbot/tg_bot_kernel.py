# –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ª–∏–±—ã
import aiofiles
import asyncio
import os
import logging
import sys

# –∫–ª–∞—Å—Å—ã –∏–∑ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã—Ö –ª–∏–±
from aiogram import Bot, Dispatcher, F                      # —è–¥—Ä–æ –±–æ—Ç–∞
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode                         # –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ html –≤—ë—Ä—Å—Ç–∫–µ
from aiogram.filters import CommandStart                    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
from aiogram.filters import StateFilter                     # —Ä–∞–±–æ—Ç–∞ —Å—Ä–∞–∑—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import Document                          # –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –±–æ—Ç–∞
from aiogram.fsm.storage.memory import MemoryStorage        # –¥–ª—è –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ª–æ–≥–∏–Ω -> –º–µ–Ω—é -> –ø—Ä–æ–≤–µ—Ä–∫–∞ -> etc
from aiogram.fsm.context import FSMContext                  # –¥–ª—è –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ª–æ–≥–∏–Ω -> –º–µ–Ω—é -> –ø—Ä–æ–≤–µ—Ä–∫–∞ -> etc
from aiogram.filters import BaseFilter                      # –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è/–≥—Ä—É–ø–ø—ã
from aiogram.exceptions import TelegramBadRequest           # –æ—à–∏–±–∫–∞
from aiogram.types import FSInputFile                       # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –±–æ—Ç–∞

from apscheduler.schedulers.asyncio import AsyncIOScheduler     # –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
from apscheduler.triggers.cron import CronTrigger


# —Å–∞–º–æ–ø–∏—Å–Ω—ã–µ –ª–∏–±—ã
from app.db import users_functions              # –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π —é–∑–µ—Ä–æ—á–∫–æ–≤
from app.db import sandbox_profiles_functions   # –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π –ø—Ä–æ—Ñ–∏–ª–µ–π ptsb
from app.bot import custom_keyboars             # –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω—é—à–µ–∫ –±–æ—Ç–∞
from app.api import ptsb_client                 # –≤–∑–∞–∏–º–æ–¥–µ–π—Å–≤–∏–µ —Å –ø–µ—Å–æ—á–Ω–∏—Ü–µ–π –ø–æ API


# —Å–∞–º–æ–ø–∏—Å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
from app.db.users_functions import AppUserFromDb
from app.db.sandbox_profiles_functions import UserProfileFromDb
from app.api.ptsb_client import ApiHeathCheck, SendScanRequest, GetScanResust
from app.bot.custom_states import *
from app.bot.custom_users_parameters import *
from app.bot.custom_roles import *


# –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
from app.api.ptsb_client import PTSB_ROOT_ADDR

# —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ –¢–ì –±–æ—Ç—É
TG_BOT_TOKEN = str(os.getenv('TG_BOT_TOKEN'))

# TG id –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¢–ì –±–æ—Ç–∞
FIRST_BOT_ADMIN_ID = int(os.getenv('FIRST_BOT_ADMIN_ID'))

### –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger("ptsb_checkbot")
logger.setLevel(logging.INFO)
log_formatter = logging.Formatter("[%(asctime)s] [%(levelname)s] %(name)s [%(funcName)s]: %(message)s")

# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ stdout
stdout_handler = logging.StreamHandler(sys.stdout)
stdout_handler.setLevel(logging.INFO)
stdout_handler.setFormatter(log_formatter)

# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è WARNING –∏ –≤—ã—à–µ
stderr_handler = logging.StreamHandler(sys.stderr)
stderr_handler.setLevel(logging.WARNING)
stderr_handler.setFormatter(log_formatter)

# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
logger.addHandler(stdout_handler)
logger.addHandler(stderr_handler)


# –¥–∏—Å–ø–µ—Ç—á–µ—Ä –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –¢–ì –±–æ—Ç–∞
dp = Dispatcher(storage=MemoryStorage())

# –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä, —á—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ
class PrivateChatsOnlyFilter(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.chat.type == "private"

# –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤ –≥–ª–æ–±–∞–ª—å–Ω–æ
dp.message.filter(PrivateChatsOnlyFilter())


# –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—É–¥–∞ —Å–∫–∞—á–∏–≤–∞—Ç—å —Ñ–∞–π–ª—ã
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
DOWNLODAD_DIR = os.path.join(PROJECT_ROOT, "downloads")
if not os.path.exists(DOWNLODAD_DIR):
    os.mkdir(DOWNLODAD_DIR)

# –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ user_id –¥–ª—è –∫–∞–∫–æ–≥–æ-—Ç–æ –æ–¥–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
class AdminSingleActionWithId:
    GET_USER_INFO = "get_one_user_info"     # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–µ –ø–æ ID
    BAN_ONE_USER = "ban_one_user"           # –±–∞–Ω —é–∑–µ—Ä–∞ –ø–æ ID
    UNBAN_ONE_USER = "unban_one_user"       # —Ä–∞–∑–±–∞–Ω —é–∑–µ—Ä–∞ –ø–æ ID
    DELETE_ONE_USER = "delete_one_user"     # —É–¥–∞–ª–µ–Ω–∏–µ —é–∑–µ—Ä–∞ –ø–æ ID


# —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def handle_get_user_info(message: Message, user_entity: AppUserFromDb) -> None:
    """"
    –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –ë–î

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç:
        - `message` (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
        - `user_entity` (object of custom class): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–µ–º
    """

    # –≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–µ—Å–∫–æ–º
    logger.info(f"Trying to get info about user: {user_entity.tg_user_id}")
    user_sandbox_profile: UserProfileFromDb = await sandbox_profiles_functions.get_profile_entity(user_entity.tg_user_id)

    await message.answer(
        f"üßæ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b> <code>{user_entity.tg_user_id}</code>:\n\n"
        "<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
        f"–†–æ–ª—å: {user_entity.user_role}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user_entity.comment}\n"
        f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: <code>{user_entity.created_by}</code>\n"
        f"–°—Ç–∞—Ç—É—Å: {'–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if user_entity.is_blocked else '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {user_entity.creation_date}\n"
        f"–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {user_entity.update_date}\n\n"
        "<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–µ—Å–æ—á–Ω–∏—Ü—ã</b>\n"
        f"–†–∞–∑—Ä–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –¥–µ–Ω—å: {user_sandbox_profile.max_available_checks}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {user_sandbox_profile.remaining_checks}\n"
        f"–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–ª –∑–∞–¥–∞–Ω–∏–π: {user_sandbox_profile.total_checks}\n"
        f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_sandbox_profile.check_priority}\n"
        f"–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è: {'–¥–∞' if user_sandbox_profile.can_get_links else  '–Ω–µ—Ç'}"
    )
    logger.info(f"Info about user: {user_entity.tg_user_id} was printed")

# —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id
async def handle_ban_user(message: Message, user_entity: AppUserFromDb) -> None:
    """"
    –§—É–Ω–∫—Ü–∏—è –±–∞–Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –ë–î

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç:
        - `message` (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
        - `user_entity` (object of custom class): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–µ–º
    """
    
    logger.info(f"Trying to ban user {user_entity.tg_user_id} by user {message.from_user.id}")

    if user_entity.tg_user_id == message.from_user.id:
        await message.answer(
            "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ!</b>\n\n"
            "–ù–µ–ª—å–∑—è —Å—Ç—Ä–µ–ª—è—Ç—å —Å–µ–±–µ –≤ –∫–æ–ª–µ–Ω–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è."
        )
        logger.info(f"User {message.from_user.id} was not banned by himself")
    
    else:
        await users_functions.change_user_state_by_id(user_entity.tg_user_id, 1)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_entity.tg_user_id}</code> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

        logger.info(f"User {user_entity.tg_user_id} was banned")

# —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id
async def handle_unban_user(message: Message, user_entity: AppUserFromDb) -> None:
    """"
    –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∞–Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –ë–î

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç:
        - `message` (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
        - `user_entity` (object of custom class): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–µ–º
    """

    logger.info(f"Trying to unban user {user_entity.tg_user_id} by user {message.from_user.id}")
    
    await users_functions.change_user_state_by_id(user_entity.tg_user_id, 0)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_entity.tg_user_id}</code> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    
    logger.info(f"User {user_entity.tg_user_id} was unbanned")

# —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —é–∑–µ—Ä–∞ –∏–∑ –ë–î
async def handle_delete_user(message: Message, user_entity: AppUserFromDb) -> None:
    """"
    –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –ë–î

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç:
        - `message` (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
        - `user_entity` (object of custom class): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–µ–º
    """

    logger.info(f"Trying to delete user {user_entity.tg_user_id} by user {message.from_user.id}")

    if user_entity.tg_user_id == message.from_user.id:
        await message.answer(
            "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ!</b>\n\n"
            "–ù–µ–ª—å–∑—è —Å—Ç—Ä–µ–ª—è—Ç—å —Å–µ–±–µ –≤ –∫–æ–ª–µ–Ω–∏ –∏ —É–¥–∞–ª—è—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è."
        )
        logger.info(f"User {message.from_user.id} was not deleted by himself")

    else:
        # —É–¥–∞–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Ñ–∏–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–µ—Å–∫–æ–º
        await users_functions.delete_user_by_id(user_entity.tg_user_id)
        await sandbox_profiles_functions.delete_profile_by_id(user_entity.tg_user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_entity.tg_user_id}</code> —É–¥–∞–ª—ë–Ω.")

        logger.info(f"User {user_entity.tg_user_id} was deleted")

# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏ (—Ö—ç–Ω–¥–ª–µ—Ä—ã)
ADMIN_SINGLE_ACTIONS_HANDLER = {
    AdminSingleActionWithId.GET_USER_INFO: handle_get_user_info,
    AdminSingleActionWithId.BAN_ONE_USER: handle_ban_user,
    AdminSingleActionWithId.UNBAN_ONE_USER: handle_unban_user,
    AdminSingleActionWithId.DELETE_ONE_USER: handle_delete_user,
}


############################## –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞ ##############################
# —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π —Å—Ç–∞—Ä—Ç
@dp.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤, —Å—Ç–∞—Ç—É—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏,
    –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ –≤—ã–±–æ—Ä–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏
    """

    # –ø–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –≤ –ë–î –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–µ–º—É –ø–æ ID
    current_user_id = message.from_user.id
    current_user_data: AppUserFromDb = await users_functions.get_user_entity(current_user_id)
    
    logger.info(f"User {current_user_id} started interaction with bot")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
    if current_user_data is None:
        logger.info(f"User {current_user_id} was not found in app database")
        
        await message.answer(
            f"‚ö†Ô∏è <b>–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã</b>!\n\n"
            f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
            f"–í–∞—à TG ID: <code>{current_user_id}</code>.",
            reply_markup=custom_keyboars.check_status_keyboard            
        )
        await state.set_state(UserStates.check_user_status)
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —é–∑–µ—Ä –≤ –±–ª–µ–∫ –ª–∏—Å—Ç–µ
    if current_user_data.is_blocked:
        logger.info(f"User {current_user_id} is banned in app and has no access")
        
        await message.answer(
            f"‚ùå <b>–î–æ—Å—Ç—É–ø –¥–ª—è –í–∞—Å –∑–∞–ø—Ä–µ—â—ë–Ω!</b>\n\n"
            f"–ï—Å–ª–∏ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Ç–æ —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.\n\n"
            f"–í–∞—à TG ID: <code>{current_user_id}</code>",
            reply_markup=custom_keyboars.check_status_keyboard
        )
        await state.set_state(UserStates.check_user_status)
        return

    # –í–æ –≤—Å–µ—Ö –ø—Ä–æ—á–∏—Ö —Å–ª—É—á–∞—è—Ö –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if current_user_data.user_role == UsersRolesInBot.main_admin:
        logger.info(f"User {current_user_id} was authorized and got role of {current_user_data.user_role}")
        
        await message.answer(
            f"üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ:",
            reply_markup=custom_keyboars.admin_root_menu_keyboard
        )
        await state.set_state(AdminStates.root_admin_menu)
        return
    
    elif current_user_data.user_role == UsersRolesInBot.user:
        logger.info(f"User {current_user_id} was authorized and got role of {current_user_data.user_role}")
        
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ:",
            reply_markup=custom_keyboars.user_main_sandbox_keyboard
        )
        await state.set_state(SandboxInteractionStates.sandbox_user_menu)
        return


############################## –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Å—Ç—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã ##############################
# —Ö—ç–Ω–¥–ª–µ—Ä—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è root_admin_menu -> manage_users_menu // –ø–µ—Ä–µ—Ö–æ–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@dp.message(AdminStates.root_admin_menu, F.text == custom_keyboars.BTN_ADMIN_MENU_MANAGE_USERS)
async def manage_users_admin_menu(message: Message, state: FSMContext) -> None:
    await message.answer(
        "üìã –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=custom_keyboars.manage_users_menu_keyboard
    )
    await state.set_state(AdminStates.manage_users_menu)
    return


# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è manage_users_menu -> root_admin_menu // –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
@dp.message(AdminStates.manage_users_menu, F.text == custom_keyboars.BTN_MANAGE_USERS_RETURN)
async def return_to_main_admin_menu(message: Message, state: FSMContext) -> None:
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ:",
        reply_markup=custom_keyboars.admin_root_menu_keyboard
    )
    await state.set_state(AdminStates.root_admin_menu)
    return


# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è root_admin_menu -> sandbox_admin_menu // –ø–µ—Ä–µ—Ö–æ–¥ –≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å–≤—Ç–∏–µ —Å –ø–µ—Å–æ—á–Ω–∏—Ü–µ–π
@dp.message(AdminStates.root_admin_menu, F.text == custom_keyboars.BTN_ADMIN_MENU_GO_TO_SANDBOX)
async def sandbox_admin_menu(message: Message, state: FSMContext) -> None:
    await message.answer(
        "üìã –ú–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–µ—Å–æ—á–Ω–∏—Ü–µ–π.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=custom_keyboars.admin_main_sandbox_keyboard
    )
    await state.set_state(SandboxInteractionStates.sandbox_admin_menu)
    return


# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è sandbox_admin_menu -> root_admin_menu // –ø–µ—Ä–µ—Ö–æ–¥ –≤ root menu —É –∞–¥–º–∏–Ω–∞
@dp.message(SandboxInteractionStates.sandbox_admin_menu, F.text == custom_keyboars.BTN_SANDBOX_MENU_RETURN)
async def return_to_main_admin_menu(message: Message, state: FSMContext) -> None:
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ:",
        reply_markup=custom_keyboars.admin_root_menu_keyboard
    )
    await state.set_state(AdminStates.root_admin_menu)
    return


# —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞, –∫–æ–≥–¥–∞ –æ–Ω –¥–µ–ª–∞–µ—Ç –µ–¥–∏–Ω–∏—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —é–∑–µ—Ä–æ–º –ø–æ ID
@dp.message(AdminStates.manage_users_menu, F.text.in_({
    custom_keyboars.BTN_MANAGE_USERS_INFO,
    custom_keyboars.BTN_MANAGE_USERS_BAN,
    custom_keyboars.BTN_MANAGE_USERS_UNBAN,
    custom_keyboars.BTN_MANAGE_USERS_DELETE
}))
async def handle_user_id_action_prompt(message: Message, state: FSMContext) -> None:
    text_to_action = {
        custom_keyboars.BTN_MANAGE_USERS_INFO: (
            AdminSingleActionWithId.GET_USER_INFO,
            "–í–≤–µ–¥–∏—Ç–µ <code>user_id</code>, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
        ),
        custom_keyboars.BTN_MANAGE_USERS_BAN: (
            AdminSingleActionWithId.BAN_ONE_USER,
            "–í–≤–µ–¥–∏—Ç–µ <code>user_id</code>, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:"
        ),
        custom_keyboars.BTN_MANAGE_USERS_UNBAN: (
            AdminSingleActionWithId.UNBAN_ONE_USER,
            "–í–≤–µ–¥–∏—Ç–µ <code>user_id</code>, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:"
        ),
        custom_keyboars.BTN_MANAGE_USERS_DELETE: (
            AdminSingleActionWithId.DELETE_ONE_USER,
            "–í–≤–µ–¥–∏—Ç–µ <code>user_id</code>, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:"
        )
    }

    action, prompt = text_to_action[message.text]

    await state.update_data(admin_action=action)
    await message.answer(prompt)
    await state.set_state(AdminStates.input_user_id)
    return


# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è input_user_id -> manage_users_menu // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ TG ID –¥–ª—è:
# 1. –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ id
# 2. —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id 
# 3. –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id
# 4. —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id 
@dp.message(AdminStates.input_user_id)
async def make_single_action_with_user_id(message: Message, state: FSMContext) -> None:
    
    # –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å admin_action –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
    admin_data = await state.get_data()
    admin_action_type = admin_data.get("admin_action") 
    
    logger.info(f"Admin user {message.from_user.id} trying to perform action: {admin_action_type}")
    
    try:
        
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ –∏–∑ –ë–î
        user_id_to_get = int(message.text)
        user_entity: AppUserFromDb = await users_functions.get_user_entity(user_id_to_get)

        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –≤ –ë–î –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if user_entity is None:
            logger.info(f"User {user_id_to_get} was not found in app db to perform action by admin user {message.from_user.id}")

            await message.answer(
                "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ!</b>\n\n"
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ."
            )
        
        # –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        else:
            handler_func = ADMIN_SINGLE_ACTIONS_HANDLER.get(admin_action_type)
            await handler_func(message, user_entity)

    # –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ TG id –æ—Ç –∞–¥–º–∏–Ω–∞
    except ValueError:
        logger.info("Action by admin user was nor perfromed, becouse of incorrect int() input")

        await message.answer(
            "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ!</b>\n\n"
            "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ."
        )
    
    # –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω–∞ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    await state.update_data(admin_action="")
    await state.set_state(AdminStates.manage_users_menu)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=custom_keyboars.manage_users_menu_keyboard
    )
    return


############################## –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–∏–µ —é–∑–µ—Ä–æ–≤ ##############################
# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–µ
@dp.message(AdminStates.manage_users_menu, F.text == custom_keyboars.BTN_MANAGE_USERS_ADD)
async def handle_promt_to_create_user(message: Message, state: FSMContext) -> None:
    
    logger.info(f"Admin user {message.from_user.id} started process of new user creation")

    # –æ–±–Ω—É–ª—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∞–¥–º–∏–Ω–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    for parameter in vars(InputUserParameters).values():
        if isinstance(parameter, str):
            await state.update_data({parameter: ""})
    
    for parameter in vars(InputSandboxProfileParameters).values():
        if isinstance(parameter, str):
            await state.update_data({parameter: ""})

    await message.answer("–í–≤–µ–¥–∏—Ç–µ <code>telegram id</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AppUserCreation.CREATE_user_id)
    return


# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ tg id –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
@dp.message(AppUserCreation.CREATE_user_id)
async def process_user_id_to_create(message: Message, state: FSMContext) -> None:

    # –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π TG ID –≤ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∫–∏–¥–∞–µ–º –≤–æ—Ä–Ω–∏–Ω–≥ –∏ –≤–æ–∑—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–∞–º–∏
    try:
        user_id_to_create = int(message.text)
    except ValueError:
        logger.info(f"Creation of user by admin user {message.from_user.id} was interrupted becouse of incorrect int(tg_user_id) input")

        await message.answer(
            "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ!</b>\n\n"
            "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ."
        )
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=custom_keyboars.manage_users_menu_keyboard
        )
        await state.set_state(AdminStates.manage_users_menu)
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–æ—Ç–µ.
    user_entity: AppUserFromDb = await users_functions.get_user_entity(user_id_to_create)
    if user_entity is not None:
        logger.info(f"Creation of user {user_entity.tg_user_id} by admin user {message.from_user.id} was interrupted becouse user already exists")

        await message.answer(
            "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ!</b>\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id <code>{user_id_to_create}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        )
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=custom_keyboars.manage_users_menu_keyboard
        )
        await state.set_state(AdminStates.manage_users_menu)
        return
    
    # –µ—Å–ª–∏ –≤—Å—ë –æ–∫, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º user_id –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–æ–ª—å –¥–ª—è –±—É–¥—É—â–µ–≥–æ —é–∑–µ—Ä–∞:
    await state.update_data({InputUserParameters.tg_user_id: user_id_to_create})
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –±—É–¥—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n" +
        f"1. <code>{UsersRolesInBot.user}</code> - –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞. –ò–º–µ–µ—Ç –ø—Ä–∞–≤–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∞–π–ª–æ–≤.\n"
    )
    await state.set_state(AppUserCreation.CREATE_user_role)
    return


# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ —Ä–æ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
@dp.message(AppUserCreation.CREATE_user_role, F.text)
async def process_user_role_to_create(message: Message, state: FSMContext) -> None:

    user_role_to_create = message.text

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è–º —Ä–æ–ª–µ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    if user_role_to_create != UsersRolesInBot.user:
        logger.info(f"Creation of user by admin user {message.from_user.id} was interrupted becouse of incorrect user_role input")

        await message.answer(
            "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ!</b>"
            f"–í–≤–µ–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç <code>{UsersRolesInBot.user}</code>."
        )
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=custom_keyboars.manage_users_menu_keyboard
        )
        await state.set_state(AdminStates.manage_users_menu)
        return
    
    # –µ—Å–ª–∏ –≤—Å—ë –æ–∫, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –¥–µ–Ω—å
    await state.update_data({InputUserParameters.user_role: user_role_to_create})
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é).\n–ü–æ–ª–µ–∑–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å –§–ò–û –∏–ª–∏ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–∑–µ—Ä–µ. –ù–µ –±–æ–ª–µ–µ 255 —Å–∏–º–≤–æ–ª–æ–≤.")
    await state.set_state(AppUserCreation.CREATE_comment)
    return


# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
@dp.message(AppUserCreation.CREATE_comment, F.text)
async def process_user_comment_to_create(message: Message, state: FSMContext) -> None:

    # –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —é–∑–µ—Ä—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç—É–µ—Ç –¥–ª–∏–Ω–µ –Ω–µ –±–æ–ª–µ–µ 255
    user_comment = message.text
    if len(user_comment) > 255:
        logger.info(f"Creation of user by admin user {message.from_user.id} was interrupted becouse of large user_comment input")

        await message.answer(
            "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ!</b>\n\n"
            "–î–ª–∏–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—É—á–∏–ª–∞—Å—å –±–æ–ª—å—à–µ 255 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=custom_keyboars.manage_users_menu_keyboard
        )
        await state.set_state(AdminStates.manage_users_menu)
        return
    
    # –µ—Å–ª–∏ –≤—Å–µ –æ–∫, —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è –ø–µ—Å–∫–∞
    await state.update_data({InputUserParameters.comment: user_comment})
    await message.answer("–í–≤–µ–¥–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–µ—Å–æ—á–Ω–∏—Ü–µ–π.")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –¥–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
    await state.set_state(SandboxProfileCreation.CREATE_max_checks)
    return



# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ max –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
@dp.message(SandboxProfileCreation.CREATE_max_checks, F.text)
async def process_user_max_cheks_to_create(message: Message, state: FSMContext) -> None:

    # –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∏—Å–ª–æ —Å—Ç—Ä–æ–≥–æ > 0
    try:
        max_user_checks = int(message.text)
        if max_user_checks <= 0:
            raise ValueError()
    except ValueError:
        logger.info(f"Creation of user by admin user {message.from_user.id} was interrupted becouse of incorrect 0 < int(max_user_cheks) input")
        
        await message.answer(
            "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ!</b>\n\n"
            "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ 0."
        )
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=custom_keyboars.manage_users_menu_keyboard
        )
        await state.set_state(AdminStates.manage_users_menu)
        return
    
    # –µ—Å–ª–∏ –≤—Å—ë –æ–∫, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data({InputSandboxProfileParameters.max_available_checks: max_user_checks})
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç 1 –¥–æ 4:\n"
        "<code>1</code> - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.\n"
        "<code>4</code> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç."
    )
    await state.set_state(SandboxProfileCreation.CREATE_check_priority)
    return


# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
@dp.message(SandboxProfileCreation.CREATE_check_priority)
async def process_user_priority_to_create(message: Message, state: FSMContext) -> None:
    
    # –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4
    try:
        user_check_priority = int(message.text)
        if user_check_priority not in range(1,5):
            raise ValueError
    except ValueError:
        logger.info(f"Creation of user by admin user {message.from_user.id} was interrupted becouse of incorrect 1 <= int(user_check_priority) <= 4 input")

        await message.answer(
            "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ!</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4."
        )
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=custom_keyboars.manage_users_menu_keyboard
        )
        await state.set_state(AdminStates.manage_users_menu)
        return

    # –µ—Å–ª–∏ –≤—Å—ë –æ–∫, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await state.update_data({InputSandboxProfileParameters.check_priority: user_check_priority})
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –±—É–¥–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è:\n"
        "<code>1</code> - –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
        "<code>0</code> - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –æ—Ç –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ <code>scan_id</code> —Å–≤–æ–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è" 
    )
    await state.set_state(SandboxProfileCreation.CREATE_can_get_links)
    return


# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ final —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(SandboxProfileCreation.CREATE_can_get_links)
async def process_user_comment_to_create(message: Message, state: FSMContext) -> None:

    # –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ 0 –∏–ª–∏ 1
    try:
        can_user_get_links = int(message.text)
        if can_user_get_links not in [0, 1]:
            raise ValueError
        
    except ValueError:
        logger.info(f"Creation of user by admin user {message.from_user.id} was interrupted becouse of incorrect 0 <= int(can_user_get_links) <= 1 input")

        await message.answer(
            "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ!</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 0 –∏–ª–∏ 1."
        )
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=custom_keyboars.manage_users_menu_keyboard
        )
        await state.set_state(AdminStates.manage_users_menu)
        return

    
    # –µ—Å–ª–∏ –≤—Å—ë –æ–∫, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    data = await state.get_data()

    # –æ—Å–Ω–æ–≤–∞–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —é–∑–µ—Ä—É
    tg_user_id = data.get(InputUserParameters.tg_user_id)
    user_role = data.get(InputUserParameters.user_role)
    user_comment = data.get(InputUserParameters.comment)

    # –ø—Ä–æ—Ñ–∏–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–µ—Å–æ—á–Ω–∏—Ü–µ–π
    max_available_checks = data.get(InputSandboxProfileParameters.max_available_checks)
    user_check_priority = data.get(InputSandboxProfileParameters.check_priority)

    # —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await users_functions.add_new_user(
        tg_user_id=tg_user_id,
        user_role=user_role,
        comment=user_comment,
        created_by=message.from_user.id
    )
    logger.info(f"Base app profile for user {tg_user_id} was created")

    # —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–µ—Å–æ—á–Ω–∏—Ü–µ–π
    await sandbox_profiles_functions.add_new_profile(
        tg_user_id=tg_user_id,
        max_available_checks=max_available_checks,
        check_priority=user_check_priority,
        can_get_links=can_user_get_links
    )
    logger.info(f"Sandbox interaction profile for user {tg_user_id} was created")
    
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ manage users menu
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id <code>{tg_user_id}</code> –¥–æ–±–∞–≤–ª–µ–Ω.")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=custom_keyboars.manage_users_menu_keyboard
    )
    await state.set_state(AdminStates.manage_users_menu)
    return

############################## –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ##############################
# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤—ã–≤–æ–¥—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(AdminStates.manage_users_menu, F.text == custom_keyboars.BTN_MANAGE_USERS_LIST_ALL)
async def handle_list_all_users(message: Message, state: FSMContext) -> None:

    await message.answer(
        "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∂–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. "
        "–û–Ω –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ –ø–æ–ª—é <code>–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</code>, –∫–æ—Ç–æ—Ä–æ–µ –í—ã —É–∫–∞–∑—ã–≤–∞–ª–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
        "–ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=custom_keyboars.list_users_no_filter_keyboard
    )
    await state.set_state(AdminStates.list_app_users)
    return

# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
@dp.message(AdminStates.list_app_users, F.text)
async def process_list_all_users(message: Message, state: FSMContext) -> None:

    # –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    filter_from_admin: str = message.text
    list_of_users_fromm_app_db: list[AppUserFromDb] = []
    
    if filter_from_admin == custom_keyboars.BTN_MANAGE_USERS_NO_FILTER:
        logger.info(f"Admin user {message.from_user.id} is going to list app users with no filter")
        list_of_users_fromm_app_db = await users_functions.fetch_all_users_with_filter()
    else:
        logger.info(f"Admin user {message.from_user.id} is going to list app users with filter")
        list_of_users_fromm_app_db = await users_functions.fetch_all_users_with_filter(comment_filter=filter_from_admin)

    # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π
    if len(list_of_users_fromm_app_db) == 0:
        await message.answer(
            "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ!</b>\n\n"
            "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞."
        )
    
    # –µ—Å–ª–∏ –Ω–µ –ø—É—Å—Ç–æ–π, —Ç–æ –≤—ã–≤–æ–¥–∏–º
    else:
        for user in list_of_users_fromm_app_db:
            await message.answer(
                f"üßæ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b> <code>{user.tg_user_id}</code>:\n\n"
                "<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
                f"–†–æ–ª—å: {user.user_role}\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user.comment}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if user.is_blocked else '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n"
                f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {user.creation_date}\n"
                f"–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {user.update_date}\n\n"
            )
    
    # –Ω—É –∏ –∏–¥–µ–º –¥–∞–ª—å—à–µ 
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=custom_keyboars.manage_users_menu_keyboard
    )
    await state.set_state(AdminStates.manage_users_menu)
    return


############################## –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã ##############################
# —Ö—ç–Ω–¥–ª–µ—Ä—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
@dp.message(AdminStates.root_admin_menu, F.text == custom_keyboars.BTN_ADMIN_MENU_MANAGE_APP)
async def go_to_manage_app_menu(message: Message, state: FSMContext) -> None:
    
    await message.answer(
        "üìã –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=custom_keyboars.admin_manage_app_keyboard
    )
    await state.set_state(AdminStates.manage_app_menu)
    return

# —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å–≤—Ç–∏–π –∞–¥–º–∏–Ω–∞ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–º –¥–µ–π—Å–≤—Ç–∏—è
@dp.message(
    AdminStates.manage_app_menu,
    F.text.in_([custom_keyboars.BTN_MANAGE_APP_GET_DB_BACKUP, custom_keyboars.BTN_MANAGE_APP_RETURN])
)
async def process_manage_app_action(message: Message, state: FSMContext) -> None:

    # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –±–µ–∫–∞–ø –ë–î
    if message.text == custom_keyboars.BTN_MANAGE_APP_GET_DB_BACKUP:
        # –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        logger.info(f"Admin user {message.from_user.id} is getting db backup of application")

        db_file = FSInputFile(users_functions.FULL_PATH_TO_KERNEL_DB, filename=users_functions.DB_NAME)
        await message.answer_document(db_file, caption="–§–∞–π–ª —Å –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å–≤—Ç–∏–µ:",
            reply_markup=custom_keyboars.admin_manage_app_keyboard
        )
        await state.set_state(AdminStates.manage_app_menu)
        return

    # –µ—Å–ª–∏ –≤—ã–π—Ç–∏ –∏–∑ –º–µ–Ω—é
    if message.text == custom_keyboars.BTN_MANAGE_APP_RETURN:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å–≤—Ç–∏–µ:",
            reply_markup=custom_keyboars.admin_root_menu_keyboard
        )
        await state.set_state(AdminStates.root_admin_menu)
        return

    

############################## –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã ##############################
# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(UserStates.check_user_status, F.text == custom_keyboars.BTN_CHECK_STATUS)
async def process_user_comment_to_create(message: Message, state: FSMContext) -> None:
    
    # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —é–∑–µ—Ä—É
    logger.info(f"User {message.from_user.id} is trying to get his status")
    user_entity: AppUserFromDb = await users_functions.get_user_entity(message.from_user.id)

    # –µ—Å–ª–∏ –≤—Å—ë –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏
    if user_entity is None:
        logger.info(f"User {message.from_user.id} is still not registred")

        await message.answer(
            "‚ö†Ô∏è <b>–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
            f"–í–∞—à TG ID: <code>{message.from_user.id}</code>.",
            reply_markup=custom_keyboars.check_status_keyboard
        )
        await state.set_state(UserStates.check_user_status)
        return

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —é–∑–µ—Ä –≤ –±–ª–µ–∫ –ª–∏—Å—Ç–µ
    if user_entity.is_blocked:
        logger.info(f"User {message.from_user.id} is banned in application")

        await message.answer(
            f"‚ùå <b>–î–æ—Å—Ç—É–ø –¥–ª—è –í–∞—Å –∑–∞–ø—Ä–µ—â—ë–Ω!</b>\n\n"
            f"–ï—Å–ª–∏ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Ç–æ —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.\n\n"
            f"–í–∞—à TG ID: <code>{user_entity.tg_user_id}</code>.",
            reply_markup=custom_keyboars.check_status_keyboard
        )
        await state.set_state(UserStates.check_user_status)
        return

    # –í–æ –≤—Å–µ—Ö –ø—Ä–æ—á–∏—Ö —Å–ª—É—á–∞—è—Ö –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if user_entity.user_role == UsersRolesInBot.user:
        logger.info(f"User {user_entity.tg_user_id} was authorized and got role of {user_entity.user_role}")

        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ:",
            reply_markup=custom_keyboars.user_main_sandbox_keyboard 
        )
        await state.set_state(SandboxInteractionStates.sandbox_user_menu)
        return


############################## –ø–µ—Å–æ—á–Ω–∏—á–µ—Å–∫–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å ptsb ##############################
# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è API PTSB
@dp.message(SandboxInteractionStates.sandbox_admin_menu, F.text == custom_keyboars.BTN_SANDBOX_MENU_CHECK_API)
async def process_user_comment_to_create(message: Message, state: FSMContext) -> None:
    
    logger.info(f"Admin user {message.from_user.id} sent API healtcheck request to PTSB")

    # –ø–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ API 
    await message.answer("–û—Ç–ø—Ä–≤–ª–µ–Ω API –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 10 —Å–µ–∫—É–Ω–¥.")
    api_health_check: ApiHeathCheck = await ptsb_client.make_api_healthcheck()

    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    if api_health_check.is_ok:
        logger.info("API healtcheck request is OK")
        await message.answer("‚úÖ API PTSB –¥–æ—Å—Ç—É–ø–µ–Ω.")
    else:
        logger.warning(f"Error acquired while sending API healthck request. Error text: {api_health_check.error_message}")
        await message.answer(
            f"‚ö†Ô∏è –ü—Ä–∏ –ø—Ä–æ–≤—Ä–∫–µ API –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n\n{api_health_check.error_message}"
        )
    
    # –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤ –º–µ–π–Ω –º–µ–Ω—é
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=custom_keyboars.admin_main_sandbox_keyboard
    )
    await state.set_state(SandboxInteractionStates.sandbox_admin_menu)
    return


# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ —Å–µ–±–µ
@dp.message(
    StateFilter(SandboxInteractionStates.sandbox_admin_menu, SandboxInteractionStates.sandbox_user_menu),
    F.text == custom_keyboars.BTN_SANDBOX_MENU_GET_STATS
)
async def get_sandbox_checks_stats(message: Message, state: FSMContext) -> None:
    
    # –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–µ—Å–∫–æ–º
    user_sandbox_profile: UserProfileFromDb = await sandbox_profiles_functions.get_profile_entity(message.from_user.id)
    # –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫–∞–∫–∞—è —É –Ω–µ–≥–æ —Ä–æ–ª—å
    user_entity: AppUserFromDb = await users_functions.get_user_entity(message.from_user.id)

    if (user_sandbox_profile is None) or (user_entity is None) or user_entity.is_blocked:
        logger.info(f"User {message.from_user.id} tried to get sandbox profile status, but had lost his access earlier")
        
        await message.answer(
            "‚ö†Ô∏è –ö–∞–∂–µ—Ç—Å—è, –¥–æ—Å—Ç—É–ø –¥–ª—è –í–∞—Å –ø—Ä–µ–∫—Ä–∞—â–µ–Ω.",
            reply_markup=custom_keyboars.check_status_keyboard
        )
        await state.set_state(UserStates.check_user_status)
        return

    await message.answer(
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ —Å—É—Ç–∫–∏: {user_sandbox_profile.max_available_checks}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: {user_sandbox_profile.remaining_checks}\n"
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:")
    
    if user_entity.user_role == UsersRolesInBot.main_admin:
        await state.set_state(SandboxInteractionStates.sandbox_admin_menu)
        return
    elif user_entity.user_role == UsersRolesInBot.user:
        await state.set_state(SandboxInteractionStates.sandbox_user_menu)
        return


# —Ö—ç–Ω–¥–µ–ª –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"
@dp.message(
    StateFilter(SandboxInteractionStates.sandbox_admin_menu, SandboxInteractionStates.sandbox_user_menu),
    F.text == custom_keyboars.BTN_SANDBOX_MENU_SEND_URL
)
async def handle_send_url_to_scan(message: Message, state: FSMContext) -> None:
    
    # –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –º–æ–∂–Ω–æ –ª–∏ –µ–º—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º
    user_entity: AppUserFromDb = await users_functions.get_user_entity(message.from_user.id)

    # –µ—Å–ª–∏ —é–∑–µ—Ä –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    if (user_entity is None) or user_entity.is_blocked:
        logger.info(f"User {message.from_user.id} tried to send link to check, but had lost his access earlier")
        
        await message.answer(
            "‚ö†Ô∏è –ö–∞–∂–µ—Ç—Å—è, –¥–æ—Å—Ç—É–ø –¥–ª—è –í–∞—Å –ø—Ä–µ–∫—Ä–∞—â–µ–Ω.",
            reply_markup=custom_keyboars.check_status_keyboard)
        await state.set_state(UserStates.check_user_status)
        return

    # –µ—Å–ª–∏ —é–∑–µ—Ä –∑–∞–∫–æ–Ω—á–∏–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ —Å–≤–æ–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    user_sandbox_profile: UserProfileFromDb = await sandbox_profiles_functions.get_profile_entity(message.from_user.id)
    if user_sandbox_profile.remaining_checks == 0:
        logger.info(f"User {message.from_user.id} tried to send link to check, but has no available checks today")

        await message.answer(
            "‚ö†Ô∏è –£ –í–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n"
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∑–∞–≤—Ç—Ä–∞."
        )
        return
    
    # –µ—Å–ª–∏ —Å —é–∑–µ—Ä–æ–º –≤—Å–µ –æ–∫–µ–π —Ç–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤ –±—É–¥—É—â–µ–º
    await state.update_data({SandboxInteractionsParameters.user_role: user_entity.user_role})
    await state.update_data({SandboxInteractionsParameters.scan_priority: user_sandbox_profile.check_priority})
    await state.update_data({SandboxInteractionsParameters.can_get_links: user_sandbox_profile.can_get_links})
    await state.update_data({SandboxInteractionsParameters.scan_type: "url"})

    # –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (–Ω–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(SandboxInteractionStates.input_url_to_scan)
    return


# —Ö—ç–Ω–¥–ª–µ—Ä –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
@dp.message(SandboxInteractionStates.input_url_to_scan)
async def process_url_input_to_scan(message: Message, state: FSMContext) -> None:
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç
    if message.text is None:
        await message.answer(
            "‚ö†Ô∏è <b>–û–∂–∏–¥–∞–ª—Å—è –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏.</b>\n\n"
            "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞."
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        await state.set_state(SandboxInteractionStates.input_url_to_scan)
        return
    
    # –ø–æ–ª—É—á–∞–µ–º URL + –∑–∞–Ω–æ—Å–∏–º –µ–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    url_to_scan: str = message.text
    url_to_scan.strip().split()[0]
    await state.update_data({SandboxInteractionsParameters.url_to_scan: url_to_scan})

    # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(
        "–ï—Å–ª–∏ –í—ã –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª—ã –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –ø–∞—Ä–æ–ª–µ–º, —É–∫–∞–∂–∏—Ç–µ –∏—Ö —Å–µ–π—á–∞—Å, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –í—Å–µ–≥–æ –Ω–µ –±–æ–ª–µ–µ 5 –ø–∞—Ä–æ–ª–µ–π.\n"
        "–ï—Å–ª–∏ –ø–∞—Ä–æ–ª–µ–π –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=custom_keyboars.send_to_scan_keyboard
    )
    await state.set_state(SandboxInteractionStates.send_req_for_scan)
    return


# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"
@dp.message(
    StateFilter(SandboxInteractionStates.sandbox_admin_menu, SandboxInteractionStates.sandbox_user_menu),
    F.text == custom_keyboars.BTN_SANDBOX_MENU_SEND_FILE
)
async def hadle_send_file_to_scan(message: Message, state: FSMContext) -> None:

    # –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –º–æ–∂–Ω–æ –ª–∏ –µ–º—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º
    user_entity: AppUserFromDb = await users_functions.get_user_entity(message.from_user.id)

    # –µ—Å–ª–∏ —é–∑–µ—Ä –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    if (user_entity is None) or user_entity.is_blocked:
        logger.info(f"User {message.from_user.id} tried to send file to check, but had lost his access earlier")

        await message.answer(
            "‚ö†Ô∏è –ö–∞–∂–µ—Ç—Å—è, –¥–æ—Å—Ç—É–ø –¥–ª—è –í–∞—Å –ø—Ä–µ–∫—Ä–∞—â–µ–Ω.",
            reply_markup=custom_keyboars.check_status_keyboard)
        await state.set_state(UserStates.check_user_status)
        return

    # –µ—Å–ª–∏ —é–∑–µ—Ä –∑–∞–∫–æ–Ω—á–∏–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ —Å–≤–æ–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    user_sandbox_profile: UserProfileFromDb = await sandbox_profiles_functions.get_profile_entity(message.from_user.id)
    if user_sandbox_profile.remaining_checks == 0:
        logger.info(f"User {message.from_user.id} tried to send file to check, but has no available checks today")
        
        await message.answer(
            "‚ö†Ô∏è –£ –í–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n"
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å."
        )
        return
    
    # –µ—Å–ª–∏ —Å —é–∑–µ—Ä–æ–º –≤—Å–µ –æ–∫–µ–π —Ç–æ –∑–∞–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤ –±—É–¥—É—â–µ–º
    await state.update_data({SandboxInteractionsParameters.user_role: user_entity.user_role})
    await state.update_data({SandboxInteractionsParameters.scan_priority: user_sandbox_profile.check_priority})
    await state.update_data({SandboxInteractionsParameters.can_get_links: user_sandbox_profile.can_get_links})
    await state.update_data({SandboxInteractionsParameters.scan_type: "file"})
    await state.update_data({SandboxInteractionsParameters.file_uploaded: False})

    # –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.\n\n"
        "–ù–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –Ω–µ –±–æ–ª–µ–µ 20 –º–±–∞–π—Ç (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–∞). –ï—Å–ª–∏ –í—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤, –±–æ—Ç –≤–æ–∑—å–º–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(SandboxInteractionStates.upload_file_to_scan)
    return  


# —Ö—ç–Ω–¥–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏
@dp.message(SandboxInteractionStates.upload_file_to_scan, F.document)
async def upload_file_to_bot(message: Message, state: FSMContext) -> None:

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã –±—ã–ª–æ –Ω–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    user_data = await state.get_data()
    if user_data.get(SandboxInteractionsParameters.file_uploaded):
        return
    await state.update_data({SandboxInteractionsParameters.file_uploaded: True})
    
    # –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    file_from_user: Document = message.document
    if not file_from_user:
        await message.answer(
            "‚ö†Ô∏è <b>–û–∂–∏–¥–∞–ª–∞—Å—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞.</b>\n\n"
            "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª–æ–≤."
        )
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        await state.set_state(upload_file_to_bot)
        return

    try:

        # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∞–ø–∏
        bot = message.bot
        
        # –ø–æ–ª—É—á–∞–µ–º id —Ñ–∞–π–ª–∞
        telegram_file_id = await bot.get_file(file_from_user.file_id)

        # –∏–º—è —Ñ–∞–π–ª–∞ –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–æ–∑–¥–∞–¥–∏–º = user_id + –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç —é–∑–µ—Ä–∞
        file_name = f"TG-{message.from_user.id}-{file_from_user.file_name}"

        # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –±–∞–π—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –∏—Å–ø–æ–ª—å–∑—É—è –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Ç–≥
        file_path_on_server = telegram_file_id.file_path
        file_bytes_data = await bot.download_file(file_path_on_server)
        
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É DOWNLOAD_DIR
        save_path = os.path.join(DOWNLODAD_DIR, file_name)
        print(save_path)
        async with aiofiles.open(save_path, "wb") as local_file:
            await local_file.write(file_bytes_data.read())

        # –∑–∞–Ω–æ—Å–∏–º —ç—Ç–æ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data({SandboxInteractionsParameters.file_to_scan: save_path})

        # –æ—Ç–≤–µ—á–∞–µ–º —é–∑–µ—Ä—É –∏ –∏–¥–µ–º –¥–∞–ª—å—à–µ
        logger.info(f"File {file_from_user.file_name} was succesfully downloaded to bot from user {message.from_user.id}")
        await message.answer(
            f"‚úÖ –§–∞–π–ª <code>{file_from_user.file_name}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –±–æ—Ç–∞!"
        )

        # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await message.answer(
            "–ï—Å–ª–∏ –í—ã –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª—ã –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –ø–∞—Ä–æ–ª–µ–º, —É–∫–∞–∂–∏—Ç–µ –∏—Ö —Å–µ–π—á–∞—Å, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –í—Å–µ–≥–æ –Ω–µ –±–æ–ª–µ–µ 5 –ø–∞—Ä–æ–ª–µ–π.\n"
            "–ï—Å–ª–∏ –ø–∞—Ä–æ–ª–µ–π –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=custom_keyboars.send_to_scan_keyboard
        )
        await state.set_state(SandboxInteractionStates.send_req_for_scan)
        return

    except TelegramBadRequest as e:
        user_data = await state.get_data()
        user_role = user_data.get(SandboxInteractionsParameters.user_role)
        reply_keyboard = custom_keyboars.admin_main_sandbox_keyboard if user_role == UsersRolesInBot.main_admin else custom_keyboars.user_main_sandbox_keyboard
        new_state = SandboxInteractionStates.sandbox_admin_menu if user_role == UsersRolesInBot.main_admin else SandboxInteractionStates.sandbox_user_menu

        if "file is too big" in str(e):
            logger.info(f"File {file_from_user.file_name} wasn't succesfully downloaded to bot from user {message.from_user.id} becouse of its large size")
            await message.answer(
                "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞!</b>\n\n"
                "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π",
                reply_markup=reply_keyboard
            )
        else:
            logger.error(f"File {file_from_user.file_name} wasn't succesfully downloaded to bot from user {message.from_user.id}", exc_info=True)
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        await state.set_state(new_state)
        return


# —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª–µ–π –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
@dp.message(SandboxInteractionStates.send_req_for_scan)
async def send_data_to_scan(message: Message, state: FSMContext) -> None:
    
    # –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –ø–∞—Ä–æ–ª–µ–π
    user_passwords_input: str = message.text

    if user_passwords_input is None:
        await message.answer(
            "‚ö†Ô∏è <b>–û–∂–∏–¥–∞–ª—Å—è –≤–≤–æ–¥ –ø–∞—Ä–æ–ª–µ–π.</b>\n\n"
            "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞."
        )
        await message.answer(
            "–ù–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π.",
            reply_markup=custom_keyboars.send_to_scan_keyboard
        )
        await state.set_state(SandboxInteractionStates.send_req_for_scan)
        return

    # –µ—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ —Ä–∞–≤–µ–Ω "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É" –ø—Ä–∏—á–µ–º –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –ø–∞—Ä–æ–ª–µ–π
    list_of_pwds: list = []
    if user_passwords_input != custom_keyboars.BTN_SANDBOX_MENU_SEND_TO_SCAN:
        list_of_pwds = user_passwords_input.split('\n')[:5]
        await state.update_data({SandboxInteractionsParameters.list_of_pwds: list_of_pwds})
    
    # –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —é–∑–µ—Ä–æ—á–∫–∞ –∏–∑ –µ–≥–æ –∂–µ –¥–∞–Ω–Ω—ã—Ö
    user_data = await state.get_data()
    user_role = user_data.get(SandboxInteractionsParameters.user_role)
    scan_priority = user_data.get(SandboxInteractionsParameters.scan_priority)
    can_get_links = user_data.get(SandboxInteractionsParameters.can_get_links)

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ñ–∞–π–ª
    scan_type = user_data.get(SandboxInteractionsParameters.scan_type)

    # –µ—Å–ª–∏ —Å–∫–∞–Ω–∏—Ç —Å—Å—ã–ª–∫—É
    if scan_type == "url":
        logger.info(f"User {message.from_user.id} sent link to scan")

        url_to_scan = user_data.get(SandboxInteractionsParameters.url_to_scan)
        # –≥—Ä—É–∑–∏–º —ç—Ç–æ –Ω–∞–∫–æ–Ω–µ—Ü —Ç–æ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü—É
        scan_req: SendScanRequest = await ptsb_client.send_link_to_scan(
            checking_link=url_to_scan,
            check_priority=scan_priority,
            passwords=list_of_pwds
        )
    
    # –µ—Å–ª–∏ —Å–∫–∞–Ω–∏—Ç —Ñ–∞–π–ª
    elif scan_type == "file":
        logger.info(f"User {message.from_user.id} sent file to scan")

        file_to_scan = user_data.get(SandboxInteractionsParameters.file_to_scan)
        # –æ–ø—è—Ç—å –≥—Ä—É–∑–∏–º —ç—Ç–æ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü—É
        scan_req: SendScanRequest = await ptsb_client.send_file_to_scan(
            path_to_file_to_upload=file_to_scan,
            check_priority=scan_priority,
            passwords=list_of_pwds
        )
        
        # –∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ —É–¥–∞–ª—è–º —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–∞–∫–∞
        if os.path.exists(file_to_scan):
            os.remove(file_to_scan)
            logger.info(f"File {file_to_scan} from user {message.from_user.id} was deleted from local storage")
        

    # –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å –Ω–µ —Å–æ–≤—Å–µ–º —É–¥–∞—á–Ω–æ
    if not scan_req.is_ok:
        logger.warning(f"Scan request from user {message.from_user.id} was unsuccessful. Error: {scan_req.error_message}")

        reply_keyboard = custom_keyboars.admin_main_sandbox_keyboard if user_role == UsersRolesInBot.main_admin else custom_keyboars.user_main_sandbox_keyboard
        new_state = SandboxInteractionStates.sandbox_admin_menu if user_role == UsersRolesInBot.main_admin else SandboxInteractionStates.sandbox_user_menu

        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –µ–º—É —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
            f"{scan_req.error_message}",
            reply_markup=reply_keyboard
        )
        await state.set_state(new_state)
        return
    
    # –µ—Å–ª–∏ –≤—Å–µ —Ç–∞–∫–∏ —É–¥–∞—á–Ω–æ
    else:
        logger.info(f"Scan request from user {message.from_user.id} was successful")

        # —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ + —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
        decrease = await sandbox_profiles_functions.decrease_remaining_checks(
            tg_user_id=message.from_user.id,
            decrease_amount=1
        )
        increase = await sandbox_profiles_functions.increase_total_checks(
            tg_user_id=message.from_user.id,
            increase_amount=1
        )
        
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ —é–∑–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not decrease or not increase:
            logger.info(f"Tried to lower remaining checks for user {message.from_user.id}, but his profile was not found. Set state check_user_status for user")

            await state.clear()
            await state.set_state(UserStates.check_user_status)
            await message.answer(
                "‚ö†Ô∏è –ö–∞–∂–µ—Ç—Å—è, –¥–æ—Å—Ç—É–ø –¥–ª—è –í–∞—Å –ø—Ä–µ–∫—Ä–∞—â–µ–Ω.",
                reply_markup=custom_keyboars.check_status_keyboard
            )
            return

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –≤—Å—ë —É–¥–∞–ª–æ—Å—å —Å —É—á–µ—Ç–æ–º —Ç–æ–≥–æ, –º–æ–∂–Ω–æ –ª–∏ —é–∑–µ—Ä—É –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ –Ω–µ—Ç
        if can_get_links:
            # –∫–Ω–æ–ø–∫–∞
            scan_button = InlineKeyboardButton(
                text = "–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é",
                url = f"https://{PTSB_ROOT_ADDR}/tasks/{scan_req.scan_id}"
            )
            # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            scan_keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[scan_button]]
            )
            await message.answer(
                "‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
                f"–ï–≥–æ ID: <code>{scan_req.scan_id}</code>.",
                reply_markup=scan_keyboard
            )

        else:
            await message.answer(
                "‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
                f"–ï–≥–æ ID: <code>{scan_req.scan_id}</code>.\n\n"
                "–° ID –∑–∞–¥–∞–Ω–∏—è –í—ã –º–æ–∂–µ—Ç–µ –≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–æ–≤–µ—Ä–∫–∏."
            )
        
        # –∑–∞–Ω–æ—Å–∏–º scan_id –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data({SandboxInteractionsParameters.scan_id: scan_req.scan_id})
        
        # –∏ –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä—è–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        await message.answer(
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=custom_keyboars.get_scan_results_keyboard
        )
        await state.set_state(SandboxInteractionStates.get_scan_results)
        return
    

# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è
@dp.message(SandboxInteractionStates.get_scan_results, F.text == custom_keyboars.BTN_SANDBOX_MENU_SCAN_RESULT)
async def process_get_scan_result(message: Message, state: FSMContext) -> None:
    
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ scan_id, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
    user_data = await state.get_data()
    scan_id_to_get = user_data.get(SandboxInteractionsParameters.scan_id)
    scan_results: GetScanResust = await ptsb_client.get_scan_results(
        scan_id=scan_id_to_get
    )

    # –∞ —Ç–∞–∫–∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ä–æ–ª–∏
    user_role = user_data.get(SandboxInteractionsParameters.user_role)
    reply_keyboard = custom_keyboars.admin_main_sandbox_keyboard if user_role == UsersRolesInBot.main_admin else custom_keyboars.user_main_sandbox_keyboard
    new_state = SandboxInteractionStates.sandbox_admin_menu if user_role == UsersRolesInBot.main_admin else SandboxInteractionStates.sandbox_user_menu

    # –µ—Å–ª–∏ API –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–Ω—ã–π
    if scan_results.is_ok == False:
        logger.warning(f"User {message.from_user.id} tried to get status for scan_id={scan_id_to_get}, but was unsuccessful. Error: {scan_results.error_message}")

        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n\n"
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –µ–º—É —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
            f"{scan_results.error_message}",
            reply_markup=reply_keyboard
        )
        await state.set_state(new_state)
        return
    
    else:
        if scan_results.is_scan_ready == False:
            await message.answer(
                "‚è≥ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.\n\n–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.",
                reply_markup=ReplyKeyboardRemove()
            )
            await asyncio.sleep(10)
            await message.answer(
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:",
                reply_markup=custom_keyboars.get_scan_results_keyboard
            )
            await state.set_state(SandboxInteractionStates.get_scan_results)
            return
        
        else:
            # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞ –±—É–¥—É—â–µ–µ, –±—É–¥–µ–º –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            scan_keyboard = None
            can_get_links = user_data.get(SandboxInteractionsParameters.can_get_links) 

            # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –º–æ–ª –ø–µ—Ä–µ–π–¥–∏ –∫ –∑–∞–¥–∞–Ω–∏—é
            if can_get_links:
                # –∫–Ω–æ–ø–∫–∞
                scan_button = InlineKeyboardButton(
                    text = "–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é",
                    url = f"https://{PTSB_ROOT_ADDR}/tasks/{scan_id_to_get}"
                )
                # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                scan_keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[[scan_button]]
                )

            # –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
            await message.answer(
                "‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {scan_results.scan_state}\n"
                f"<b>–í–µ—Ä–¥–∏–∫—Ç</b>: {scan_results.verdict}\n"
                f"<b>–¢–∏–ø –í–ü–û</b>: {scan_results.threat}\n",
                reply_markup=scan_keyboard
            )

            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–π–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_keyboard
            )
            await state.set_state(new_state)
            return


# –∑–∞–≥–ª—É—à–∫–∞ 
@dp.message()
async def echo_handler(message: Message, state: FSMContext) -> None:
    
    # –ø–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state = await state.get_state()

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ state –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if user_state is None:
        await message.answer(
            "‚ö†Ô∏è <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!</b>\n\n"
            "–õ–∏–±–æ —Ç—ã –Ω–æ–≤–µ–Ω—å–∫–∏–π, –ª–∏–±–æ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ /start.",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        logger.info(f"User {message.from_user.id} made something, that putted him to default echo_handler")
        await message.answer(
            "‚ö†Ô∏è <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!</b>\n\n"
            "–ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç—ã —Å–¥–µ–ª–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –∫–∞–∫ —è –ø–æ–ø—Ä–æ—Å–∏–ª —Ç–µ–±—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ. –ü–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Å–¥–µ–ª–∞–π —ç—Ç–æ —Ç–∞–∫, –∫–∞–∫ —è —Ç–µ–±—è –ø–æ–ø—Ä–æ—Å–∏–ª."
        )
        await state.set_state(user_state)
        return


# –≥–ª–∞–≤–Ω—ã–π –º–µ–π–Ω —Ü–∏–∫–ª, –≥–¥–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–æ—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º –¥–∞–ª—å—à–µ –±—É–¥–µ—Ç –∏–¥—Ç–∏ —Ä–∞–±–æ—Ç–∞
async def main() -> None:

    # —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ —Ç–∞–±–ª—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await users_functions.create_table_if_not_exists()
    await sandbox_profiles_functions.create_table_if_not_exists()

    logger.info("Default app db was created and all needed tables in it")

    # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –±–æ—Ç–∞ –≤ –ë–î –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è, –µ—Å–ª–∏ –æ–Ω –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
    first_admin_entity: AppUserFromDb = await users_functions.get_user_entity(FIRST_BOT_ADMIN_ID)
    if first_admin_entity is None:
        logger.info(f"Main admin {FIRST_BOT_ADMIN_ID} was not in app db, so adding him to db")    
    
        # –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await users_functions.add_new_user(
            tg_user_id=FIRST_BOT_ADMIN_ID,
            user_role=UsersRolesInBot.main_admin,
            comment="–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
            created_by=FIRST_BOT_ADMIN_ID
        )

        # –ø—Ä–æ—Ñ–∏–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–µ—Å–æ—á–Ω–∏—Ü–µ–π
        await sandbox_profiles_functions.add_new_profile(
            FIRST_BOT_ADMIN_ID,
            1_000_000,
            4,
            1
        )
    
    # —à—ç–¥—É–ª–µ—Ä –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
    logger.info("Setting up scheduler to renew amount of remaining_checks for all users")
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")  # TODO –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—ã–π TZ
    scheduler.add_job(
        sandbox_profiles_functions.daily_reset_remaining_checks,
        CronTrigger(hour=0, minute=0),
        misfire_grace_time=60 * 60,
        coalesce=True,
        max_instances=1
    )
    scheduler.start()
    
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∞–ø–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    logger.info("Initializing tg bot entity")
    bot = Bot(token=TG_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    # And the run events dispatching
    logger.info("Starting tg bot entity")
    await dp.start_polling(bot)


# INT MAIN() –¥–∞–Ω—å –∫–ª–∞—Å—Å–∏–∫–µ
if __name__ == "__main__":
    
    # –∑–∞–ø—É—Å–∫ –º–µ–π–Ω–∞ –≤ –∞—Å–∏–Ω–∫–µ, —Ç.–∫. –±–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –∞ –º–µ–π–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    logger.info("Starting up application")
    asyncio.run(main())